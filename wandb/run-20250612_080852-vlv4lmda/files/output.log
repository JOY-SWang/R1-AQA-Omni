  0%|                                                                                                                                       | 0/1000 [00:00<?, ?it/s]/root/miniconda3/lib/python3.10/site-packages/torch/utils/checkpoint.py:87: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
text===================**
["<|im_start|>system\nYou are Qwen, a virtual human developed by the Qwen Team, Alibaba Group, capable of perceiving auditory and visual inputs, as well as generating text and speech.<|im_end|>\n<|im_start|>user\n<|audio_bos|><|AUDIO|><|audio_eos|>What's moving in the audio? Please choose the answer from the following options: ['lathe rotation sound', 'motorcycle', 'metro', 'train']. Output the final answer in <answer> </answer>.<|im_end|>\n<|im_start|>assistant\n"]
  warnings.warn(
`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...
prompt_completion_ids===================**
GenerateDecoderOnlyOutput(sequences=tensor([[151644,   8948,    198,  ..., 151643, 151643, 151643],
        [151644,   8948,    198,  ..., 151643, 151643, 151643],
        [151644,   8948,    198,  ..., 151643, 151643, 151643],
        ...,
        [151644,   8948,    198,  ..., 151643, 151643, 151643],
        [151644,   8948,    198,  ...,    432,     30, 151645],
        [151644,   8948,    198,  ..., 151643, 151643, 151643]],
       device='cuda:0'), scores=None, logits=(tensor([[ 0.7383,  4.4062,  1.4375,  ..., -3.2031, -3.2031, -3.2031],
        [ 0.7383,  4.5000,  1.5000,  ..., -3.1562, -3.1562, -3.1562],
        [ 0.6719,  4.5938,  1.4844,  ..., -3.6719, -3.6719, -3.6719],
        ...,
        [ 0.5859,  4.5000,  1.4375,  ..., -3.4062, -3.4062, -3.4062],
        [ 0.4863,  4.3125,  1.4453,  ..., -3.5469, -3.5469, -3.5469],
        [ 0.4824,  4.3438,  1.4531,  ..., -3.5469, -3.5469, -3.5469]],
       device='cuda:0'), tensor([[ 0.0859,  1.8750,  3.1562,  ..., -4.4062, -4.4062, -4.4062],
        [ 0.3066,  1.9375,  3.2969,  ..., -4.4688, -4.4688, -4.4688],
        [ 0.0972,  1.8203,  3.1406,  ..., -4.3750, -4.3750, -4.3750],
        ...,
        [ 0.0430,  1.8125,  3.1406,  ..., -4.5000, -4.5000, -4.5000],
        [-0.0161,  1.8281,  3.0781,  ..., -4.4688, -4.4688, -4.4688],
        [ 0.1396,  1.8125,  3.1406,  ..., -4.4062, -4.4062, -4.4062]],
       device='cuda:0'), tensor([[4.7500, 7.3438, 2.8438,  ..., 1.2578, 1.2578, 1.2578],
        [4.7812, 7.3750, 2.8438,  ..., 1.2422, 1.2422, 1.2422],
        [4.6875, 7.1562, 2.8125,  ..., 1.3203, 1.3203, 1.3203],
        ...,
        [4.8438, 7.3438, 2.9219,  ..., 1.3828, 1.3828, 1.3828],
        [4.6875, 7.2812, 2.7656,  ..., 1.2891, 1.2891, 1.2891],
        [4.6875, 7.2188, 2.8438,  ..., 1.2812, 1.2812, 1.2812]],
       device='cuda:0'), tensor([[ 2.1250, -1.4844, -4.4688,  ..., -5.5625, -5.5625, -5.5625],
        [ 2.2344, -1.7031, -4.9375,  ..., -5.6875, -5.6875, -5.6875],
        [ 1.9844, -1.5781, -4.4688,  ..., -5.7188, -5.7188, -5.7188],
        ...,
        [ 2.1562, -1.4766, -4.5000,  ..., -5.7812, -5.7812, -5.7812],
        [ 2.0781, -1.3672, -4.2188,  ..., -5.5625, -5.5625, -5.5625],
        [ 1.8594, -1.7734, -4.6250,  ..., -5.7188, -5.7188, -5.7188]],
       device='cuda:0'), tensor([[ 4.3438,  3.3125,  2.7969,  ..., -5.4375, -5.4375, -5.4375],
        [ 4.3438,  3.3281,  2.7031,  ..., -5.4688, -5.4688, -5.4688],
        [ 4.2188,  3.1562,  2.6562,  ..., -5.3750, -5.3750, -5.3750],
        ...,
        [ 4.2812,  3.2344,  2.7188,  ..., -5.4062, -5.4062, -5.4062],
        [ 4.2188,  5.4375,  3.5625,  ..., -4.6875, -4.6875, -4.6562],
        [ 4.3438,  3.3125,  2.8125,  ..., -5.3750, -5.3750, -5.3750]],
       device='cuda:0'), tensor([[ 5.4062,  8.5000,  5.5625,  ..., -3.9688, -3.9688, -3.9688],
        [ 5.0312,  7.6250,  4.7812,  ..., -6.0312, -6.0312, -6.0312],
        [ 4.9062,  7.5312,  4.7812,  ..., -6.0000, -6.0000, -6.0000],
        ...,
        [ 4.9688,  8.0000,  5.1875,  ..., -5.0625, -5.0625, -5.0625],
        [ 5.8750,  1.9922,  1.6328,  ..., -2.7656, -2.7656, -2.7656],
        [ 5.0000,  7.5312,  4.7500,  ..., -6.0312, -6.0312, -6.0312]],
       device='cuda:0'), tensor([[ 6.0000, 10.1250,  6.7500,  ..., -4.5938, -4.5938, -4.5938],
        [ 7.1562, 11.0625,  7.1562,  ..., -1.7422, -1.7422, -1.7422],
        [ 6.0312, 10.0000,  6.3750,  ..., -4.8750, -4.8750, -4.8750],
        ...,
        [ 6.0000, 10.0625,  6.5625,  ..., -4.7188, -4.7188, -4.7188],
        [ 4.3438,  1.4453,  2.9219,  ...,  1.9688,  1.9688,  1.9688],
        [ 6.2188, 10.4375,  6.7188,  ..., -4.3438, -4.3438, -4.3438]],
       device='cuda:0'), tensor([[ 4.5625,  9.1875,  4.1875,  ..., -4.3750, -4.3750, -4.3750],
        [ 4.3750,  9.0000,  4.0312,  ..., -4.4688, -4.4688, -4.4688],
        [ 4.5938,  9.1250,  4.1250,  ..., -4.4375, -4.4375, -4.4375],
        ...,
        [ 4.5625,  9.1875,  4.1250,  ..., -4.4375, -4.4375, -4.4375],
        [ 2.7188,  5.0000,  3.2500,  ..., -0.3398, -0.3398, -0.3398],
        [ 4.6875,  9.3125,  4.3438,  ..., -4.5000, -4.5000, -4.5000]],
       device='cuda:0'), tensor([[ 4.5312,  2.2188,  0.2930,  ..., -3.3125, -3.3125, -3.3125],
        [ 4.5312,  2.2188,  0.2715,  ..., -3.3750, -3.3750, -3.3750],
        [ 5.1562,  2.5781,  0.6992,  ..., -3.5625, -3.5625, -3.5625],
        ...,
        [ 4.5938,  2.3281,  0.3770,  ..., -3.4062, -3.4062, -3.4062],
        [ 7.5000,  8.0625,  6.1562,  ..., -2.0156, -2.0156, -2.0156],
        [ 4.7812,  2.3438,  0.4512,  ..., -3.5625, -3.5625, -3.5625]],
       device='cuda:0'), tensor([[ 3.9531,  1.8906,  2.5312,  ...,  1.3203,  1.3203,  1.3203],
        [ 3.3438,  1.2266,  2.2188,  ...,  1.1172,  1.1172,  1.1172],
        [ 3.6094,  1.3984,  2.4688,  ...,  1.3984,  1.3984,  1.3984],
        ...,
        [ 3.9531,  1.8203,  2.5156,  ...,  1.2734,  1.2734,  1.2812],
        [ 7.8125,  5.9375,  3.7344,  ..., -2.3125, -2.3125, -2.3125],
        [ 3.8438,  1.6797,  2.6094,  ...,  1.6094,  1.6094,  1.6094]],
       device='cuda:0'), tensor([[ 7.2188,  1.6562,  0.5625,  ..., -0.1094, -0.1104, -0.1094],
        [ 3.0312,  4.8438,  3.0781,  ..., -0.1816, -0.1826, -0.1816],
        [ 3.1250,  5.0625,  3.1875,  ..., -0.0552, -0.0562, -0.0554],
        ...,
        [ 3.1719,  5.1250,  3.2500,  ..., -0.0422, -0.0430, -0.0422],
        [ 8.3750, 10.2500,  6.2812,  ...,  0.3262,  0.3262,  0.3262],
        [ 7.3750,  1.9453,  0.8320,  ...,  0.0566,  0.0557,  0.0566]],
       device='cuda:0'), tensor([[16.1250,  9.6250,  6.3750,  ...,  1.7188,  1.7188,  1.7188],
        [ 7.5625,  8.1875,  6.7188,  ..., -1.7656, -1.7656, -1.7656],
        [ 7.5000,  8.0625,  6.6562,  ..., -1.7969, -1.7969, -1.7969],
        ...,
        [16.7500, 10.3750,  7.0312,  ...,  2.4688,  2.4688,  2.4688],
        [ 0.7891,  5.2188,  0.2949,  ..., -5.6250, -5.6250, -5.6250],
        [15.1875, 11.4375,  6.8125,  ...,  3.2500,  3.2500,  3.2500]],
       device='cuda:0'), tensor([[10.6250,  9.8750,  6.9062,  ...,  3.2188,  3.2188,  3.2188],
        [ 7.6250,  5.3125,  4.0000,  ..., -2.2656, -2.2656, -2.2656],
        [ 7.9375,  5.5938,  4.3125,  ..., -1.3750, -1.3750, -1.3750],
        ...,
        [ 9.6250,  9.0625,  6.1875,  ...,  1.5469,  1.5469,  1.5469],
        [ 4.0625,  1.0156,  1.6797,  ..., -5.0000, -5.0000, -5.0000],
        [10.4375,  9.9375,  6.5625,  ...,  2.9219,  2.9219,  2.9219]],
       device='cuda:0'), tensor([[ 9.3125,  7.9062,  1.8828,  ..., -4.4688, -4.4688, -4.4688],
        [ 8.1875,  8.3125,  5.7812,  ..., -2.1719, -2.1719, -2.1719],
        [ 8.2500,  8.2500,  5.8125,  ..., -2.2812, -2.2812, -2.2812],
        ...,
        [ 7.9688,  9.1250,  5.6562,  ..., -1.8594, -1.8594, -1.8594],
        [ 2.7656,  7.1250, -0.5195,  ..., -4.4375, -4.4375, -4.4375],
        [12.5000, 11.7500,  8.8125,  ...,  2.0156,  2.0156,  2.0156]],
       device='cuda:0'), tensor([[ 8.3750, 10.6250,  5.6875,  ..., -0.4473, -0.4492, -0.4473],
        [ 0.9688,  1.5156, -1.3359,  ..., -6.8438, -6.8438, -6.8438],
        [ 8.0000,  6.0000,  5.0000,  ..., -3.8906, -3.8906, -3.8906],
        ...,
        [12.5625,  9.0000,  7.5625,  ...,  2.3281,  2.3281,  2.3281],
        [ 0.2598,  1.1797, -0.7578,  ..., -4.4688, -4.4688, -4.4688],
        [14.8125, 11.3750,  8.6875,  ...,  3.7500,  3.7500,  3.7500]],
       device='cuda:0'), tensor([[11.0625,  9.3750,  8.5000,  ...,  1.2812,  1.2812,  1.2812],
        [ 3.5625,  0.0322,  0.2158,  ..., -5.0625, -5.0625, -5.0625],
        [ 1.1719,  0.2354, -1.0078,  ..., -7.5000, -7.5000, -7.5000],
        ...,
        [ 9.6250,  9.6875,  7.4062,  ...,  0.7617,  0.7617,  0.7617],
        [ 2.2969,  6.9375, -0.3965,  ..., -5.8125, -5.8125, -5.8125],
        [12.3750, 11.3750,  7.9375,  ...,  2.7188,  2.7188,  2.7188]],
       device='cuda:0'), tensor([[ 9.1250,  7.7812,  7.1250,  ..., -0.1934, -0.1943, -0.1943],
        [10.4375,  7.0938,  3.9688,  ..., -2.7500, -2.7500, -2.7500],
        [ 8.9375,  9.0000,  6.8125,  ..., -0.5312, -0.5312, -0.5312],
        ...,
        [ 5.6562,  7.9062,  2.2031,  ..., -1.5859, -1.5859, -1.5859],
        [ 9.6875,  9.2500,  6.9375,  ..., -0.1299, -0.1289, -0.1289],
        [12.8750, 12.9375,  9.2500,  ...,  2.5625,  2.5625,  2.5625]],
       device='cuda:0'), tensor([[ 5.7188,  3.6406,  2.9219,  ..., -4.8750, -4.8750, -4.8750],
        [15.4375,  9.1875,  6.6562,  ...,  0.5078,  0.5078,  0.5078],
        [ 2.1250,  1.9297, -1.0469,  ..., -5.7812, -5.7812, -5.7812],
        ...,
        [ 6.0312,  6.8125,  2.7500,  ..., -1.7656, -1.7656, -1.7656],
        [ 4.7500,  7.5312,  5.9688,  ..., -2.4062, -2.4062, -2.4062],
        [12.9375, 11.1250,  9.7500,  ...,  4.3438,  4.3438,  4.3438]],
       device='cuda:0'), tensor([[15.0625,  9.5625,  6.9062,  ...,  4.2500,  4.2500,  4.2500],
        [14.8125,  6.9375,  5.6250,  ..., -1.1875, -1.1875, -1.1875],
        [ 4.1875,  0.2852, -0.1465,  ..., -5.4062, -5.4062, -5.4062],
        ...,
        [16.7500,  9.1250,  6.1875,  ...,  0.6797,  0.6797,  0.6797],
        [ 2.5156,  2.6562,  0.7266,  ..., -4.8125, -4.8125, -4.8125],
        [ 3.1875,  3.4375,  0.5273,  ..., -4.5312, -4.5312, -4.5312]],
       device='cuda:0'), tensor([[ 8.6250e+00,  8.1875e+00,  6.0625e+00,  ...,  1.7871e-01,
          1.7871e-01,  1.7773e-01],
        [ 1.1812e+01,  8.8125e+00,  8.0000e+00,  ...,  2.2031e+00,
          2.2031e+00,  2.2031e+00],
        [ 1.7375e+01,  8.5000e+00,  5.9688e+00,  ...,  2.2031e+00,
          2.2031e+00,  2.2031e+00],
        ...,
        [ 1.1312e+01,  1.1000e+01,  7.9062e+00,  ...,  1.4375e+00,
          1.4453e+00,  1.4375e+00],
        [ 1.3375e+01,  9.8750e+00,  7.7500e+00,  ...,  1.6797e+00,
          1.6797e+00,  1.6797e+00],
        [ 3.1562e+00,  4.9438e-03,  4.0430e-01,  ..., -4.9688e+00,
         -4.9688e+00, -4.9688e+00]], device='cuda:0'), tensor([[20.1250, 12.6250,  9.3750,  ...,  4.5938,  4.5938,  4.5938],
        [19.2500,  7.7812,  6.0938,  ...,  1.6250,  1.6250,  1.6250],
        [14.3125,  6.7188,  4.6562,  ...,  0.7695,  0.7695,  0.7695],
        ...,
        [ 5.4375,  6.8438,  2.3281,  ..., -4.0312, -4.0312, -4.0312],
        [10.8125, 10.4375,  8.1250,  ...,  3.3281,  3.3281,  3.3281],
        [ 7.8750,  5.2812,  2.1719,  ..., -3.9375, -3.9375, -3.9375]],
       device='cuda:0'), tensor([[ 9.8750,  7.9375,  7.1250,  ...,  1.3438,  1.3438,  1.3438],
        [ 1.2812,  3.9531,  0.8867,  ..., -1.4062, -1.4141, -1.4062],
        [ 0.2793,  3.0469,  0.2334,  ..., -2.8750, -2.8750, -2.8750],
        ...,
        [17.6250,  9.5000,  7.9062,  ...,  3.1406,  3.1406,  3.1406],
        [ 3.5781,  3.7188,  1.3203,  ..., -4.2812, -4.2812, -4.2812],
        [ 4.0625,  2.0000,  0.5781,  ..., -3.4219, -3.4219, -3.4219]],
       device='cuda:0'), tensor([[ 9.2500,  7.5312,  7.7500,  ...,  1.2422,  1.2422,  1.2422],
        [11.2500,  9.5625,  4.7500,  ...,  1.3125,  1.3125,  1.3047],
        [ 9.7500, 10.0625,  6.5938,  ...,  2.3438,  2.3438,  2.3438],
        ...,
        [ 3.7188,  5.1562,  2.5469,  ..., -1.1250, -1.1328, -1.1250],
        [ 9.4375,  6.8750,  3.4062,  ..., -1.4844, -1.4844, -1.4844],
        [20.2500,  8.1875,  5.8438,  ...,  2.1875,  2.1875,  2.1875]],
       device='cuda:0'), tensor([[ 4.5312,  3.4531,  2.7188,  ..., -4.8750, -4.8750, -4.8750],
        [ 9.2500,  6.4375,  3.7812,  ..., -0.2441, -0.2432, -0.2432],
        [ 7.9688, 12.1875,  7.0000,  ...,  1.8984,  1.8984,  1.8984],
        ...,
        [ 9.8750,  8.6250,  7.2188,  ...,  1.5156,  1.5156,  1.5156],
        [11.7500,  6.0938,  3.7656,  ..., -0.3770, -0.3770, -0.3750],
        [ 2.8594,  3.8281,  1.1797,  ..., -3.3438, -3.3438, -3.3438]],
       device='cuda:0'), tensor([[18.8750,  9.9375,  9.0000,  ...,  3.8750,  3.8750,  3.8750],
        [ 7.0938,  5.3438,  3.9062,  ..., -1.2891, -1.2891, -1.2891],
        [ 8.3750,  7.2500,  6.9062,  ..., -0.5430, -0.5430, -0.5430],
        ...,
        [ 7.8125,  8.0625,  6.4062,  ...,  0.9102,  0.9141,  0.9141],
        [ 7.7812,  7.2500,  6.7500,  ...,  1.8750,  1.8750,  1.8750],
        [10.7500,  9.2500,  4.9375,  ...,  0.1826,  0.1826,  0.1816]],
       device='cuda:0'), tensor([[ 8.2500,  5.6875,  4.8438,  ..., -0.6172, -0.6133, -0.6133],
        [15.5625,  7.4688,  6.2500,  ...,  2.7188,  2.7188,  2.7188],
        [ 6.2500,  5.8125,  4.8125,  ..., -2.9375, -2.9375, -2.9375],
        ...,
        [ 9.9375,  9.1250,  8.5625,  ...,  1.8672,  1.8672,  1.8672],
        [ 3.4219,  4.1875,  1.4531,  ..., -3.3281, -3.3281, -3.3281],
        [11.3750,  8.1875,  6.0000,  ..., -0.4961, -0.4961, -0.4941]],
       device='cuda:0'), tensor([[ 6.6250,  3.4531,  2.2500,  ..., -3.9688, -3.9688, -3.9688],
        [ 1.3750,  3.1875,  2.9844,  ...,  1.4844,  1.4844,  1.4844],
        [ 5.0938,  4.8438,  2.6250,  ..., -4.4062, -4.4062, -4.4062],
        ...,
        [ 7.5625,  6.4688,  6.0625,  ..., -0.9922, -0.9922, -0.9922],
        [12.8750,  6.8750,  4.4375,  ..., -1.1953, -1.1953, -1.1953],
        [ 9.5000,  8.3125,  3.7188,  ..., -2.6406, -2.6406, -2.6406]],
       device='cuda:0'), tensor([[ 7.9375,  2.8750,  2.1250,  ..., -5.9062, -5.8750, -5.8750],
        [ 1.0703, -2.6094,  2.7188,  ...,  1.6641,  1.6641,  1.6641],
        [12.5000,  7.6250,  4.4062,  ...,  1.2109,  1.2109,  1.2188],
        ...,
        [ 5.3438,  4.0312,  2.8281,  ..., -3.8281, -3.8281, -3.8281],
        [ 1.9141,  3.4062,  1.2812,  ..., -2.2344, -2.2344, -2.2188],
        [ 5.5625,  4.5000,  2.3594,  ..., -2.7656, -2.7656, -2.7656]],
       device='cuda:0'), tensor([[12.2500,  5.9062,  4.4688,  ..., -3.3906, -3.3906, -3.3906],
        [ 1.7969,  8.5625,  5.8125,  ..., -6.3438, -6.3438, -6.3438],
        [ 8.6875,  8.1875,  6.0625,  ...,  1.1953,  1.1953,  1.1953],
        ...,
        [ 4.9375,  4.9062,  2.0000,  ..., -2.6562, -2.6562, -2.6562],
        [14.3125, 10.6875,  5.7500,  ...,  2.4531,  2.4531,  2.4531],
        [ 9.8750,  6.9688,  4.5625,  ..., -2.6719, -2.6719, -2.6719]],
       device='cuda:0'), tensor([[23.3750,  8.1875,  7.1250,  ..., -1.1016, -1.1016, -1.1016],
        [ 2.2031,  8.6250,  5.9062,  ..., -6.4688, -6.4688, -6.4688],
        [15.9375,  8.8750,  6.5938,  ...,  3.4219,  3.4219,  3.4219],
        ...,
        [ 4.9375,  1.4453,  0.5547,  ..., -2.5000, -2.5000, -2.5000],
        [ 9.0625,  9.6875,  5.5000,  ...,  2.2500,  2.2500,  2.2500],
        [17.1250,  8.9375,  7.5625,  ...,  3.1250,  3.1250,  3.1250]],
       device='cuda:0'), tensor([[ 5.9375,  4.2500,  6.7500,  ..., -0.3945, -0.3945, -0.3926],
        [ 2.5000,  8.6250,  5.8750,  ..., -6.2500, -6.2500, -6.2500],
        [ 6.6250,  4.8125,  2.9375,  ..., -2.2969, -2.2969, -2.2969],
        ...,
        [ 5.7812,  5.3750,  1.8828,  ..., -1.3359, -1.3359, -1.3359],
        [10.1875,  8.8750,  5.0312,  ..., -0.0398, -0.0400, -0.0408],
        [ 2.7188,  3.3438,  3.6875,  ...,  1.3906,  1.3906,  1.3906]],
       device='cuda:0'), tensor([[ 1.5547, -3.0312,  3.0938,  ..., -0.2402, -0.2402, -0.2402],
        [ 2.8438,  8.7500,  6.0625,  ..., -5.9062, -5.9062, -5.9062],
        [ 8.8125,  5.9375,  1.8672,  ..., -3.7656, -3.7656, -3.7500],
        ...,
        [17.0000,  8.5625,  6.7500,  ...,  3.4375,  3.4375,  3.4375],
        [10.0625,  7.8125,  4.7188,  ..., -0.1504, -0.1494, -0.1494],
        [ 1.3281, -2.7500,  2.4844,  ..., -1.1328, -1.1328, -1.1328]],
       device='cuda:0'), tensor([[ 2.0781,  8.9375,  5.9375,  ..., -5.8750, -5.8750, -5.8750],
        [ 3.2031,  9.0000,  6.2812,  ..., -5.7188, -5.7188, -5.7188],
        [15.7500,  4.3438,  2.7031,  ..., -4.1250, -4.1250, -4.1250],
        ...,
        [ 3.1406,  4.8438,  5.8125,  ...,  2.6875,  2.6875,  2.6875],
        [ 6.4375,  4.9688,  4.1250,  ..., -2.2656, -2.2656, -2.2656],
        [ 2.0625,  8.7500,  6.0000,  ..., -6.1875, -6.1875, -6.1875]],
       device='cuda:0'), tensor([[ 2.4062,  8.7500,  6.1875,  ..., -6.1250, -6.1250, -6.1250],
        [ 3.3594,  9.0625,  6.2812,  ..., -5.4688, -5.4688, -5.4688],
        [ 8.8750,  3.3281,  1.9531,  ..., -3.4062, -3.4062, -3.4062],
        ...,
        [ 1.8750, -2.5156,  3.4375,  ...,  2.1719,  2.1719,  2.1875],
        [15.6875,  8.0000,  6.3750,  ...,  2.2969,  2.2969,  2.2969],
        [ 2.2344,  8.5625,  6.0000,  ..., -6.3750, -6.3750, -6.3750]],
       device='cuda:0'), tensor([[ 2.7344,  8.9375,  6.3438,  ..., -5.8750, -5.8750, -5.8750],
        [ 3.5312,  9.2500,  6.4375,  ..., -5.4688, -5.4688, -5.4688],
        [28.7500,  3.4531,  4.4062,  ..., -0.5000, -0.5000, -0.5000],
        ...,
        [ 1.9453,  8.6875,  5.7188,  ..., -6.1875, -6.1875, -6.1875],
        [10.2500,  8.1250,  6.4062,  ...,  1.8828,  1.8828,  1.8828],
        [ 2.5312,  8.6250,  6.0625,  ..., -6.1562, -6.1562, -6.1562]],
       device='cuda:0'), tensor([[ 3.0625,  9.2500,  6.5625,  ..., -5.6875, -5.6875, -5.6875],
        [ 3.5781,  9.2500,  6.4688,  ..., -5.3438, -5.3438, -5.3438],
        [ 5.3125,  2.9375,  4.9688,  ...,  3.4219,  3.4219,  3.4219],
        ...,
        [ 2.1562,  8.5625,  5.8438,  ..., -6.2812, -6.2812, -6.2812],
        [14.1250,  9.8125,  6.2812,  ...,  1.4688,  1.4688,  1.4688],
        [ 2.7969,  8.7500,  6.1562,  ..., -5.9062, -5.9062, -5.9062]],
       device='cuda:0'), tensor([[ 3.2969,  9.4375,  6.5000,  ..., -5.5938, -5.5938, -5.5938],
        [ 3.5000,  9.1250,  6.2812,  ..., -5.3750, -5.3750, -5.3750],
        [ 1.3125, -2.8438,  3.6406,  ...,  1.6953,  1.6953,  1.6953],
        ...,
        [ 2.5000,  8.6875,  5.9062,  ..., -6.2188, -6.2188, -6.2188],
        [ 2.1250,  2.7188,  2.3281,  ..., -0.4941, -0.4941, -0.4922],
        [ 3.0469,  8.9375,  6.2188,  ..., -5.8125, -5.8125, -5.8125]],
       device='cuda:0'), tensor([[ 3.4531,  9.5625,  6.6562,  ..., -5.5938, -5.5938, -5.5938],
        [ 3.4844,  9.0625,  6.2812,  ..., -5.3438, -5.3438, -5.3438],
        [ 1.7891,  8.6875,  5.7500,  ..., -6.2812, -6.2812, -6.2812],
        ...,
        [ 2.9219,  8.9375,  6.2188,  ..., -5.9375, -5.9375, -5.9375],
        [ 8.0000,  7.5000,  6.4375,  ...,  1.2266,  1.2344,  1.2266],
        [ 3.0625,  8.9375,  6.0625,  ..., -5.7500, -5.7500, -5.7500]],
       device='cuda:0'), tensor([[ 3.4062,  9.6250,  6.6250,  ..., -5.5312, -5.5312, -5.5312],
        [ 3.5312,  9.1250,  6.2812,  ..., -5.0938, -5.0938, -5.0938],
        [ 1.8672,  8.3750,  5.5938,  ..., -6.6562, -6.6562, -6.6562],
        ...,
        [ 3.0781,  9.0000,  6.2500,  ..., -5.9062, -5.9062, -5.9062],
        [ 5.1250,  5.6875,  3.6562,  ..., -1.0000, -1.0000, -1.0000],
        [ 3.3594,  9.1250,  6.3125,  ..., -5.6875, -5.6875, -5.6875]],
       device='cuda:0'), tensor([[ 3.6875,  9.8125,  6.6562,  ..., -5.4062, -5.4062, -5.4062],
        [ 3.6094,  9.0625,  6.3750,  ..., -5.0000, -5.0000, -5.0000],
        [ 2.3906,  8.5625,  5.7812,  ..., -6.4375, -6.4375, -6.4375],
        ...,
        [ 3.4062,  9.3125,  6.4062,  ..., -5.6562, -5.6562, -5.6562],
        [ 9.0000,  8.8750,  7.4375,  ...,  0.4922,  0.4922,  0.4922],
        [ 3.3594,  9.1250,  6.3438,  ..., -5.5625, -5.5625, -5.5625]],
       device='cuda:0'), tensor([[ 3.7656,  9.8750,  6.5000,  ..., -5.3438, -5.3438, -5.3438],
        [ 3.4844,  8.9375,  6.2500,  ..., -5.0000, -5.0000, -5.0000],
        [ 2.7500,  8.8750,  5.9688,  ..., -6.1875, -6.1875, -6.1875],
        ...,
        [ 3.5000,  9.3125,  6.4062,  ..., -5.6250, -5.6250, -5.6250],
        [ 4.8438,  4.9688,  4.0938,  ..., -3.2812, -3.2812, -3.2812],
        [ 3.5781,  9.3750,  6.3750,  ..., -5.3750, -5.3750, -5.3750]],
       device='cuda:0'), tensor([[ 3.8594,  9.7500,  6.5938,  ..., -5.2812, -5.2812, -5.2812],
        [ 3.5156,  8.9375,  6.1562,  ..., -5.1562, -5.1562, -5.1562],
        [ 3.1250,  9.0625,  6.1562,  ..., -5.9375, -5.9375, -5.9375],
        ...,
        [ 3.5938,  9.4375,  6.5000,  ..., -5.4375, -5.4688, -5.4688],
        [ 3.7031,  2.7188,  1.4219,  ..., -5.5938, -5.5938, -5.5938],
        [ 3.3438,  9.1875,  6.2812,  ..., -5.3438, -5.3438, -5.3438]],
       device='cuda:0'), tensor([[ 3.8594,  9.5625,  6.4688,  ..., -5.3125, -5.3125, -5.3125],
        [ 3.6250,  8.9375,  6.2500,  ..., -5.1250, -5.1250, -5.1250],
        [ 3.5000,  9.3750,  6.3125,  ..., -5.7812, -5.7812, -5.7812],
        ...,
        [ 3.5625,  9.3125,  6.4688,  ..., -5.4062, -5.4375, -5.4375],
        [13.6250,  5.7500,  5.5312,  ...,  1.9766,  1.9766,  1.9766],
        [ 3.4688,  9.2500,  6.4375,  ..., -5.1875, -5.1875, -5.1875]],
       device='cuda:0'), tensor([[ 3.8594,  9.5625,  6.4688,  ..., -5.2188, -5.2188, -5.2188],
        [ 3.8594,  8.6250,  6.0625,  ..., -4.9375, -4.9375, -4.9375],
        [ 3.4375,  9.3750,  6.2812,  ..., -5.6875, -5.6875, -5.6875],
        ...,
        [ 3.4531,  9.1875,  6.1875,  ..., -5.4375, -5.4375, -5.4375],
        [14.2500, 10.3750,  7.9062,  ...,  2.2812,  2.2812,  2.2812],
        [ 3.5000,  9.1250,  6.3750,  ..., -5.1562, -5.1562, -5.1562]],
       device='cuda:0'), tensor([[ 3.7188,  9.2500,  6.2500,  ..., -5.2500, -5.2500, -5.2500],
        [ 3.6562,  8.6250,  5.9062,  ..., -5.3438, -5.3438, -5.3438],
        [ 3.5156,  9.3750,  6.3750,  ..., -5.6250, -5.6250, -5.6250],
        ...,
        [ 3.5000,  8.9375,  6.1562,  ..., -5.3438, -5.3438, -5.3438],
        [10.3750,  9.7500,  7.6250,  ...,  2.4688,  2.4688,  2.4688],
        [ 3.4219,  9.0625,  6.3125,  ..., -5.1562, -5.1562, -5.1562]],
       device='cuda:0'), tensor([[ 3.6406,  9.0625,  6.0625,  ..., -5.3125, -5.3125, -5.3125],
        [ 3.6875,  8.6875,  5.9062,  ..., -5.4062, -5.4062, -5.4062],
        [ 3.5469,  9.3750,  6.3125,  ..., -5.6250, -5.6250, -5.6250],
        ...,
        [ 3.5469,  9.0000,  6.2812,  ..., -5.2812, -5.2812, -5.2812],
        [18.2500, 11.0625,  7.7500,  ...,  4.7500,  4.7500,  4.7500],
        [ 3.3125,  8.7500,  6.0625,  ..., -5.4062, -5.4062, -5.4062]],
       device='cuda:0'), tensor([[ 3.7344,  9.0000,  6.0625,  ..., -5.2812, -5.2812, -5.2812],
        [ 3.7656,  8.6875,  5.9062,  ..., -5.3125, -5.3125, -5.3125],
        [ 3.6406,  9.3750,  6.4375,  ..., -5.3750, -5.3750, -5.3750],
        ...,
        [ 3.6406,  8.9375,  6.2812,  ..., -5.2188, -5.2188, -5.2188],
        [ 4.5312,  4.6875,  7.0938,  ...,  2.5469,  2.5469,  2.5469],
        [ 3.5781,  8.8125,  6.1875,  ..., -5.2812, -5.2812, -5.2812]],
       device='cuda:0')), attentions=None, hidden_states=None, past_key_values=<transformers.cache_utils.DynamicCache object at 0x7f5ef25484c0>)
completion_ids===================**
tensor([[    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
             29,   8325,     11,    421,    498,   1184,    894,    803,   1492,
            389,    419,    476,    614,   1008,   4755,     11,   1101,   1077,
            752,   1414,      0, 151645, 151643, 151643, 151643, 151643, 151643,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
          14276,   1084,  10362,   1075,    264,   6844,    383,  12695,   5112,
            311,    752,     13,   3555,    653,    498,   1744,     30, 151645,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
          14276,   1084,  10362,   1075,   4325,    374,   1667,    264,   6844,
            383,   5662,     13,   1416,    498,    614,    894,   1008,   4755,
            911,    432,     11,   2666,   1910,    311,   2548,     13, 151645,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
          14276,   1416,    498,    614,    894,   1008,   7699,   6358,   4755,
            476,   1101,   1366,    311,   6236,    911,   2494,   2155,     11,
           2666,   1910,    311,   1077,    752,   1414,      0, 151645, 151643,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,   6844,    383,  12695,   5112,    690,   9217,
          14276,   1096,    646,    387,  67595,    504,    279,   4008,    315,
            279,   5112,     13,   1416,    498,    614,    894,   1008,   4755,
            911,   5112,   6239,    476,   4113,    770,     11,   2666,   1910,
            311,   1077,    752,   1414,     13, 151645, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
          14276,   8325,     11,    429,    594,   1128,    358,    646,   3291,
            504,    279,   7699,     13,   3155,    498,    614,    894,   1008,
           7040,  10362,    311,   4332,     30, 151645, 151643, 151643, 151643,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643],
        [    27,   9217,     29,  10397,    522,   9217,  14276,   1084,  10362,
           1075,    279,  28071,  21220,    323,  28659,   7203,    429,    594,
          14260,    315,    264,   5426,   4303,    389,   1181,  13918,     13,
           2055,     11,   1128,    653,    498,   1744,    911,    429,     30,
           3155,    498,    614,    894,   1008,   4755,   5435,    311,    432,
             30, 151645],
        [    27,   9217,     29,   5524,    383,  12695,   5112,    522,   9217,
             29,   2055,     11,    432,   4977,   1075,   1052,    594,    264,
           6844,    383,   1660,  23151,     13,   3555,    770,    525,    498,
          22208,    911,     30, 151645, 151643, 151643, 151643, 151643, 151643,
         151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643, 151643,
         151643, 151643]], device='cuda:0')
completions===================**
['<answer>lathe rotation sound</answer> Well, if you need any more help on this or have other questions, just let me know!', '<answer>lathe rotation sound</answer>. It sounds like a lathe rotation sound to me. What do you think?', '<answer>lathe rotation sound</answer>. It sounds like someone is using a lathe machine. If you have any other questions about it, feel free to ask.', '<answer>lathe rotation sound</answer>. If you have any other audio analysis questions or just want to chat about something different, feel free to let me know!', '<answer> lathe rotation sound </answer>. This can be inferred from the description of the sound. If you have any other questions about sound effects or anything else, feel free to let me know.', "<answer>lathe rotation sound</answer>. Well, that's what I can tell from the audio. Do you have any other interesting sounds to share?", "<answer>train</answer>. It sounds like the rhythmic and sustained movement that's typical of a train running on its tracks. So, what do you think about that? Do you have any other questions related to it?", "<answer>lathe rotation sound</answer> So, it seems like there's a lathe being operated. What else are you curious about?"]
Invalidate trace cache @ step 0 and module 2372: cache has only 0 modules
Traceback (most recent call last):
  File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/train.py", line 80, in <module>
    main()
  File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/train.py", line 75, in main
    trainer.train()
  File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 2240, in train
    return inner_training_loop(
  File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 2555, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 3745, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/trainer/grpo_trainer.py", line 462, in compute_loss
    per_token_logps = self._get_per_token_logps(model, prompt_completion_ids, attention_mask, features_values, features_masks)
  File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/trainer/grpo_trainer.py", line 343, in _get_per_token_logps
    logits = model(input_ids, attention_mask=attention_mask, input_features=features_values, feature_attention_mask=features_masks).logits  # (B, L, V)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/deepspeed/utils/nvtx.py", line 18, in wrapped_fn
    ret_val = func(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/deepspeed/runtime/engine.py", line 1914, in forward
    loss = self.module(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1845, in _call_impl
    return inner()
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1793, in inner
    result = forward_call(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/transformers/models/qwen2_5_omni/modeling_qwen2_5_omni.py", line 2361, in forward
    inputs_embeds = self.get_input_embeddings()(input_ids)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1845, in _call_impl
    return inner()
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1793, in inner
    result = forward_call(*args, **kwargs)
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/sparse.py", line 190, in forward
    return F.embedding(
  File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/functional.py", line 2551, in embedding
    return torch.embedding(weight, input, padding_idx, scale_grad_by_freq, sparse)
TypeError: embedding(): argument 'indices' (position 2) must be Tensor, not GenerateDecoderOnlyOutput
[rank0]: Traceback (most recent call last):
[rank0]:   File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/train.py", line 80, in <module>
[rank0]:     main()
[rank0]:   File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/train.py", line 75, in main
[rank0]:     trainer.train()
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 2240, in train
[rank0]:     return inner_training_loop(
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 2555, in _inner_training_loop
[rank0]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/transformers/trainer.py", line 3745, in training_step
[rank0]:     loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
[rank0]:   File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/trainer/grpo_trainer.py", line 462, in compute_loss
[rank0]:     per_token_logps = self._get_per_token_logps(model, prompt_completion_ids, attention_mask, features_values, features_masks)
[rank0]:   File "/fs-computility/niuyazhe/wangjieyi/code/r1-aqa-main-v1/src/trainer/grpo_trainer.py", line 343, in _get_per_token_logps
[rank0]:     logits = model(input_ids, attention_mask=attention_mask, input_features=features_values, feature_attention_mask=features_masks).logits  # (B, L, V)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/deepspeed/utils/nvtx.py", line 18, in wrapped_fn
[rank0]:     ret_val = func(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/deepspeed/runtime/engine.py", line 1914, in forward
[rank0]:     loss = self.module(*inputs, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1845, in _call_impl
[rank0]:     return inner()
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1793, in inner
[rank0]:     result = forward_call(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/transformers/models/qwen2_5_omni/modeling_qwen2_5_omni.py", line 2361, in forward
[rank0]:     inputs_embeds = self.get_input_embeddings()(input_ids)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1845, in _call_impl
[rank0]:     return inner()
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1793, in inner
[rank0]:     result = forward_call(*args, **kwargs)
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/modules/sparse.py", line 190, in forward
[rank0]:     return F.embedding(
[rank0]:   File "/root/miniconda3/lib/python3.10/site-packages/torch/nn/functional.py", line 2551, in embedding
[rank0]:     return torch.embedding(weight, input, padding_idx, scale_grad_by_freq, sparse)
[rank0]: TypeError: embedding(): argument 'indices' (position 2) must be Tensor, not GenerateDecoderOnlyOutput
